// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module loadBiasFromDRAM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cnn_oParaNext_co_V_read,
        cnn_wParaNext_memAddrBias_V_read,
        m_axi_SHARED_DRAM_V_AWVALID,
        m_axi_SHARED_DRAM_V_AWREADY,
        m_axi_SHARED_DRAM_V_AWADDR,
        m_axi_SHARED_DRAM_V_AWID,
        m_axi_SHARED_DRAM_V_AWLEN,
        m_axi_SHARED_DRAM_V_AWSIZE,
        m_axi_SHARED_DRAM_V_AWBURST,
        m_axi_SHARED_DRAM_V_AWLOCK,
        m_axi_SHARED_DRAM_V_AWCACHE,
        m_axi_SHARED_DRAM_V_AWPROT,
        m_axi_SHARED_DRAM_V_AWQOS,
        m_axi_SHARED_DRAM_V_AWREGION,
        m_axi_SHARED_DRAM_V_AWUSER,
        m_axi_SHARED_DRAM_V_WVALID,
        m_axi_SHARED_DRAM_V_WREADY,
        m_axi_SHARED_DRAM_V_WDATA,
        m_axi_SHARED_DRAM_V_WSTRB,
        m_axi_SHARED_DRAM_V_WLAST,
        m_axi_SHARED_DRAM_V_WID,
        m_axi_SHARED_DRAM_V_WUSER,
        m_axi_SHARED_DRAM_V_ARVALID,
        m_axi_SHARED_DRAM_V_ARREADY,
        m_axi_SHARED_DRAM_V_ARADDR,
        m_axi_SHARED_DRAM_V_ARID,
        m_axi_SHARED_DRAM_V_ARLEN,
        m_axi_SHARED_DRAM_V_ARSIZE,
        m_axi_SHARED_DRAM_V_ARBURST,
        m_axi_SHARED_DRAM_V_ARLOCK,
        m_axi_SHARED_DRAM_V_ARCACHE,
        m_axi_SHARED_DRAM_V_ARPROT,
        m_axi_SHARED_DRAM_V_ARQOS,
        m_axi_SHARED_DRAM_V_ARREGION,
        m_axi_SHARED_DRAM_V_ARUSER,
        m_axi_SHARED_DRAM_V_RVALID,
        m_axi_SHARED_DRAM_V_RREADY,
        m_axi_SHARED_DRAM_V_RDATA,
        m_axi_SHARED_DRAM_V_RLAST,
        m_axi_SHARED_DRAM_V_RID,
        m_axi_SHARED_DRAM_V_RUSER,
        m_axi_SHARED_DRAM_V_RRESP,
        m_axi_SHARED_DRAM_V_BVALID,
        m_axi_SHARED_DRAM_V_BREADY,
        m_axi_SHARED_DRAM_V_BRESP,
        m_axi_SHARED_DRAM_V_BID,
        m_axi_SHARED_DRAM_V_BUSER,
        SHARED_DRAM_V_offset,
        bbuf_V_address0,
        bbuf_V_ce0,
        bbuf_V_we0,
        bbuf_V_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_pp0_stage0 = 12'd256;
parameter    ap_ST_fsm_state12 = 12'd512;
parameter    ap_ST_fsm_pp1_stage0 = 12'd1024;
parameter    ap_ST_fsm_state15 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [12:0] cnn_oParaNext_co_V_read;
input  [39:0] cnn_wParaNext_memAddrBias_V_read;
output   m_axi_SHARED_DRAM_V_AWVALID;
input   m_axi_SHARED_DRAM_V_AWREADY;
output  [31:0] m_axi_SHARED_DRAM_V_AWADDR;
output  [0:0] m_axi_SHARED_DRAM_V_AWID;
output  [31:0] m_axi_SHARED_DRAM_V_AWLEN;
output  [2:0] m_axi_SHARED_DRAM_V_AWSIZE;
output  [1:0] m_axi_SHARED_DRAM_V_AWBURST;
output  [1:0] m_axi_SHARED_DRAM_V_AWLOCK;
output  [3:0] m_axi_SHARED_DRAM_V_AWCACHE;
output  [2:0] m_axi_SHARED_DRAM_V_AWPROT;
output  [3:0] m_axi_SHARED_DRAM_V_AWQOS;
output  [3:0] m_axi_SHARED_DRAM_V_AWREGION;
output  [0:0] m_axi_SHARED_DRAM_V_AWUSER;
output   m_axi_SHARED_DRAM_V_WVALID;
input   m_axi_SHARED_DRAM_V_WREADY;
output  [127:0] m_axi_SHARED_DRAM_V_WDATA;
output  [15:0] m_axi_SHARED_DRAM_V_WSTRB;
output   m_axi_SHARED_DRAM_V_WLAST;
output  [0:0] m_axi_SHARED_DRAM_V_WID;
output  [0:0] m_axi_SHARED_DRAM_V_WUSER;
output   m_axi_SHARED_DRAM_V_ARVALID;
input   m_axi_SHARED_DRAM_V_ARREADY;
output  [31:0] m_axi_SHARED_DRAM_V_ARADDR;
output  [0:0] m_axi_SHARED_DRAM_V_ARID;
output  [31:0] m_axi_SHARED_DRAM_V_ARLEN;
output  [2:0] m_axi_SHARED_DRAM_V_ARSIZE;
output  [1:0] m_axi_SHARED_DRAM_V_ARBURST;
output  [1:0] m_axi_SHARED_DRAM_V_ARLOCK;
output  [3:0] m_axi_SHARED_DRAM_V_ARCACHE;
output  [2:0] m_axi_SHARED_DRAM_V_ARPROT;
output  [3:0] m_axi_SHARED_DRAM_V_ARQOS;
output  [3:0] m_axi_SHARED_DRAM_V_ARREGION;
output  [0:0] m_axi_SHARED_DRAM_V_ARUSER;
input   m_axi_SHARED_DRAM_V_RVALID;
output   m_axi_SHARED_DRAM_V_RREADY;
input  [127:0] m_axi_SHARED_DRAM_V_RDATA;
input   m_axi_SHARED_DRAM_V_RLAST;
input  [0:0] m_axi_SHARED_DRAM_V_RID;
input  [0:0] m_axi_SHARED_DRAM_V_RUSER;
input  [1:0] m_axi_SHARED_DRAM_V_RRESP;
input   m_axi_SHARED_DRAM_V_BVALID;
output   m_axi_SHARED_DRAM_V_BREADY;
input  [1:0] m_axi_SHARED_DRAM_V_BRESP;
input  [0:0] m_axi_SHARED_DRAM_V_BID;
input  [0:0] m_axi_SHARED_DRAM_V_BUSER;
input  [27:0] SHARED_DRAM_V_offset;
output  [8:0] bbuf_V_address0;
output   bbuf_V_ce0;
output   bbuf_V_we0;
output  [127:0] bbuf_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_SHARED_DRAM_V_ARVALID;
reg m_axi_SHARED_DRAM_V_RREADY;
reg bbuf_V_ce0;
reg bbuf_V_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] wbufTmp_V_address0;
reg    wbufTmp_V_ce0;
reg    wbufTmp_V_we0;
wire   [127:0] wbufTmp_V_q0;
reg    SHARED_DRAM_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    SHARED_DRAM_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_260;
reg   [9:0] i_op_assign_reg_134;
reg   [9:0] i_op_assign_reg_134_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] t_V_reg_146;
reg   [9:0] tmp_20_cast_reg_237;
wire   [40:0] sum_fu_185_p2;
reg   [40:0] sum_reg_244;
reg    ap_sig_ioackin_m_axi_SHARED_DRAM_V_ARREADY;
wire   [0:0] exitcond_fu_205_p2;
reg   [0:0] exitcond_reg_260_pp0_iter1_reg;
wire   [9:0] i_fu_210_p2;
reg   [9:0] i_reg_264;
reg    ap_enable_reg_pp0_iter0;
reg   [127:0] SHARED_DRAM_V_addr_r_1_reg_269;
wire   [0:0] exitcond2_fu_221_p2;
reg   [0:0] exitcond2_reg_274;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [9:0] dramAddr_V_fu_226_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] tmp_9_fu_232_p1;
reg   [63:0] tmp_9_reg_283;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state12;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_enable_reg_pp1_iter1;
reg   [9:0] ap_phi_mux_i_op_assign_phi_fu_138_p4;
wire   [63:0] tmp_s_fu_216_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] sum_cast_fu_191_p1;
reg    ap_reg_ioackin_m_axi_SHARED_DRAM_V_ARREADY;
wire   [13:0] lhs_V_cast_fu_157_p1;
wire   [13:0] ret_V_6_tr_fu_161_p2;
wire   [40:0] sext_cast_fu_181_p1;
wire   [40:0] tmp_4_cast_fu_177_p1;
wire    ap_CS_fsm_state15;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_reg_ioackin_m_axi_SHARED_DRAM_V_ARREADY = 1'b0;
end

loadBiasFromDRAM_wbufTmp_V #(
    .DataWidth( 128 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
wbufTmp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wbufTmp_V_address0),
    .ce0(wbufTmp_V_ce0),
    .we0(wbufTmp_V_we0),
    .d0(SHARED_DRAM_V_addr_r_1_reg_269),
    .q0(wbufTmp_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_SHARED_DRAM_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_m_axi_SHARED_DRAM_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_SHARED_DRAM_V_ARREADY <= 1'b0;
            end else if ((m_axi_SHARED_DRAM_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_SHARED_DRAM_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_260 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_op_assign_reg_134 <= i_reg_264;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_op_assign_reg_134 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        t_V_reg_146 <= 10'd0;
    end else if (((exitcond2_fu_221_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_V_reg_146 <= dramAddr_V_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_260 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        SHARED_DRAM_V_addr_r_1_reg_269 <= m_axi_SHARED_DRAM_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond2_reg_274 <= exitcond2_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_260 <= exitcond_fu_205_p2;
        exitcond_reg_260_pp0_iter1_reg <= exitcond_reg_260;
        i_op_assign_reg_134_pp0_iter1_reg <= i_op_assign_reg_134;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_264 <= i_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_reg_244 <= sum_fu_185_p2;
        tmp_20_cast_reg_237 <= {{ret_V_6_tr_fu_161_p2[13:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_9_reg_283[9 : 0] <= tmp_9_fu_232_p1[9 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SHARED_DRAM_V_blk_n_AR = m_axi_SHARED_DRAM_V_ARREADY;
    end else begin
        SHARED_DRAM_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_260 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SHARED_DRAM_V_blk_n_R = m_axi_SHARED_DRAM_V_RVALID;
    end else begin
        SHARED_DRAM_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_205_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_221_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_260 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_op_assign_phi_fu_138_p4 = i_reg_264;
    end else begin
        ap_phi_mux_i_op_assign_phi_fu_138_p4 = i_op_assign_reg_134;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_SHARED_DRAM_V_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_SHARED_DRAM_V_ARREADY = m_axi_SHARED_DRAM_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_SHARED_DRAM_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bbuf_V_ce0 = 1'b1;
    end else begin
        bbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_reg_274 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bbuf_V_we0 = 1'b1;
    end else begin
        bbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_SHARED_DRAM_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_SHARED_DRAM_V_ARVALID = 1'b1;
    end else begin
        m_axi_SHARED_DRAM_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_260 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_SHARED_DRAM_V_RREADY = 1'b1;
    end else begin
        m_axi_SHARED_DRAM_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        wbufTmp_V_address0 = tmp_9_fu_232_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        wbufTmp_V_address0 = tmp_s_fu_216_p1;
    end else begin
        wbufTmp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        wbufTmp_V_ce0 = 1'b1;
    end else begin
        wbufTmp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_260_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wbufTmp_V_we0 = 1'b1;
    end else begin
        wbufTmp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_SHARED_DRAM_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_205_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_205_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond2_fu_221_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond2_fu_221_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_260 == 1'd0) & (m_axi_SHARED_DRAM_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_260 == 1'd0) & (m_axi_SHARED_DRAM_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((exitcond_reg_260 == 1'd0) & (m_axi_SHARED_DRAM_V_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign bbuf_V_address0 = tmp_9_reg_283;

assign bbuf_V_d0 = wbufTmp_V_q0;

assign dramAddr_V_fu_226_p2 = (t_V_reg_146 + 10'd1);

assign exitcond2_fu_221_p2 = ((t_V_reg_146 == tmp_20_cast_reg_237) ? 1'b1 : 1'b0);

assign exitcond_fu_205_p2 = ((ap_phi_mux_i_op_assign_phi_fu_138_p4 == tmp_20_cast_reg_237) ? 1'b1 : 1'b0);

assign i_fu_210_p2 = (ap_phi_mux_i_op_assign_phi_fu_138_p4 + 10'd1);

assign lhs_V_cast_fu_157_p1 = cnn_oParaNext_co_V_read;

assign m_axi_SHARED_DRAM_V_ARADDR = sum_cast_fu_191_p1;

assign m_axi_SHARED_DRAM_V_ARBURST = 2'd0;

assign m_axi_SHARED_DRAM_V_ARCACHE = 4'd0;

assign m_axi_SHARED_DRAM_V_ARID = 1'd0;

assign m_axi_SHARED_DRAM_V_ARLEN = tmp_20_cast_reg_237;

assign m_axi_SHARED_DRAM_V_ARLOCK = 2'd0;

assign m_axi_SHARED_DRAM_V_ARPROT = 3'd0;

assign m_axi_SHARED_DRAM_V_ARQOS = 4'd0;

assign m_axi_SHARED_DRAM_V_ARREGION = 4'd0;

assign m_axi_SHARED_DRAM_V_ARSIZE = 3'd0;

assign m_axi_SHARED_DRAM_V_ARUSER = 1'd0;

assign m_axi_SHARED_DRAM_V_AWADDR = 32'd0;

assign m_axi_SHARED_DRAM_V_AWBURST = 2'd0;

assign m_axi_SHARED_DRAM_V_AWCACHE = 4'd0;

assign m_axi_SHARED_DRAM_V_AWID = 1'd0;

assign m_axi_SHARED_DRAM_V_AWLEN = 32'd0;

assign m_axi_SHARED_DRAM_V_AWLOCK = 2'd0;

assign m_axi_SHARED_DRAM_V_AWPROT = 3'd0;

assign m_axi_SHARED_DRAM_V_AWQOS = 4'd0;

assign m_axi_SHARED_DRAM_V_AWREGION = 4'd0;

assign m_axi_SHARED_DRAM_V_AWSIZE = 3'd0;

assign m_axi_SHARED_DRAM_V_AWUSER = 1'd0;

assign m_axi_SHARED_DRAM_V_AWVALID = 1'b0;

assign m_axi_SHARED_DRAM_V_BREADY = 1'b0;

assign m_axi_SHARED_DRAM_V_WDATA = 128'd0;

assign m_axi_SHARED_DRAM_V_WID = 1'd0;

assign m_axi_SHARED_DRAM_V_WLAST = 1'b0;

assign m_axi_SHARED_DRAM_V_WSTRB = 16'd0;

assign m_axi_SHARED_DRAM_V_WUSER = 1'd0;

assign m_axi_SHARED_DRAM_V_WVALID = 1'b0;

assign ret_V_6_tr_fu_161_p2 = (lhs_V_cast_fu_157_p1 + 14'd15);

assign sext_cast_fu_181_p1 = SHARED_DRAM_V_offset;

assign sum_cast_fu_191_p1 = sum_reg_244;

assign sum_fu_185_p2 = (sext_cast_fu_181_p1 + tmp_4_cast_fu_177_p1);

assign tmp_4_cast_fu_177_p1 = cnn_wParaNext_memAddrBias_V_read;

assign tmp_9_fu_232_p1 = t_V_reg_146;

assign tmp_s_fu_216_p1 = i_op_assign_reg_134_pp0_iter1_reg;

always @ (posedge ap_clk) begin
    tmp_9_reg_283[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //loadBiasFromDRAM
