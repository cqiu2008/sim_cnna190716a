// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module testUnLoadImage (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cnn_oPara_memAddrImgOut_V_read,
        lineWidthDiv16,
        hIndex,
        m_axi_foddr_V_AWVALID,
        m_axi_foddr_V_AWREADY,
        m_axi_foddr_V_AWADDR,
        m_axi_foddr_V_AWID,
        m_axi_foddr_V_AWLEN,
        m_axi_foddr_V_AWSIZE,
        m_axi_foddr_V_AWBURST,
        m_axi_foddr_V_AWLOCK,
        m_axi_foddr_V_AWCACHE,
        m_axi_foddr_V_AWPROT,
        m_axi_foddr_V_AWQOS,
        m_axi_foddr_V_AWREGION,
        m_axi_foddr_V_AWUSER,
        m_axi_foddr_V_WVALID,
        m_axi_foddr_V_WREADY,
        m_axi_foddr_V_WDATA,
        m_axi_foddr_V_WSTRB,
        m_axi_foddr_V_WLAST,
        m_axi_foddr_V_WID,
        m_axi_foddr_V_WUSER,
        m_axi_foddr_V_ARVALID,
        m_axi_foddr_V_ARREADY,
        m_axi_foddr_V_ARADDR,
        m_axi_foddr_V_ARID,
        m_axi_foddr_V_ARLEN,
        m_axi_foddr_V_ARSIZE,
        m_axi_foddr_V_ARBURST,
        m_axi_foddr_V_ARLOCK,
        m_axi_foddr_V_ARCACHE,
        m_axi_foddr_V_ARPROT,
        m_axi_foddr_V_ARQOS,
        m_axi_foddr_V_ARREGION,
        m_axi_foddr_V_ARUSER,
        m_axi_foddr_V_RVALID,
        m_axi_foddr_V_RREADY,
        m_axi_foddr_V_RDATA,
        m_axi_foddr_V_RLAST,
        m_axi_foddr_V_RID,
        m_axi_foddr_V_RUSER,
        m_axi_foddr_V_RRESP,
        m_axi_foddr_V_BVALID,
        m_axi_foddr_V_BREADY,
        m_axi_foddr_V_BRESP,
        m_axi_foddr_V_BID,
        m_axi_foddr_V_BUSER,
        foddr_V_offset,
        ibuf0_V_address0,
        ibuf0_V_ce0,
        ibuf0_V_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_pp0_stage0 = 8'd4;
parameter    ap_ST_fsm_state8 = 8'd8;
parameter    ap_ST_fsm_state9 = 8'd16;
parameter    ap_ST_fsm_state10 = 8'd32;
parameter    ap_ST_fsm_state11 = 8'd64;
parameter    ap_ST_fsm_state12 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [39:0] cnn_oPara_memAddrImgOut_V_read;
input  [25:0] lineWidthDiv16;
input  [14:0] hIndex;
output   m_axi_foddr_V_AWVALID;
input   m_axi_foddr_V_AWREADY;
output  [31:0] m_axi_foddr_V_AWADDR;
output  [0:0] m_axi_foddr_V_AWID;
output  [31:0] m_axi_foddr_V_AWLEN;
output  [2:0] m_axi_foddr_V_AWSIZE;
output  [1:0] m_axi_foddr_V_AWBURST;
output  [1:0] m_axi_foddr_V_AWLOCK;
output  [3:0] m_axi_foddr_V_AWCACHE;
output  [2:0] m_axi_foddr_V_AWPROT;
output  [3:0] m_axi_foddr_V_AWQOS;
output  [3:0] m_axi_foddr_V_AWREGION;
output  [0:0] m_axi_foddr_V_AWUSER;
output   m_axi_foddr_V_WVALID;
input   m_axi_foddr_V_WREADY;
output  [127:0] m_axi_foddr_V_WDATA;
output  [15:0] m_axi_foddr_V_WSTRB;
output   m_axi_foddr_V_WLAST;
output  [0:0] m_axi_foddr_V_WID;
output  [0:0] m_axi_foddr_V_WUSER;
output   m_axi_foddr_V_ARVALID;
input   m_axi_foddr_V_ARREADY;
output  [31:0] m_axi_foddr_V_ARADDR;
output  [0:0] m_axi_foddr_V_ARID;
output  [31:0] m_axi_foddr_V_ARLEN;
output  [2:0] m_axi_foddr_V_ARSIZE;
output  [1:0] m_axi_foddr_V_ARBURST;
output  [1:0] m_axi_foddr_V_ARLOCK;
output  [3:0] m_axi_foddr_V_ARCACHE;
output  [2:0] m_axi_foddr_V_ARPROT;
output  [3:0] m_axi_foddr_V_ARQOS;
output  [3:0] m_axi_foddr_V_ARREGION;
output  [0:0] m_axi_foddr_V_ARUSER;
input   m_axi_foddr_V_RVALID;
output   m_axi_foddr_V_RREADY;
input  [127:0] m_axi_foddr_V_RDATA;
input   m_axi_foddr_V_RLAST;
input  [0:0] m_axi_foddr_V_RID;
input  [0:0] m_axi_foddr_V_RUSER;
input  [1:0] m_axi_foddr_V_RRESP;
input   m_axi_foddr_V_BVALID;
output   m_axi_foddr_V_BREADY;
input  [1:0] m_axi_foddr_V_BRESP;
input  [0:0] m_axi_foddr_V_BID;
input  [0:0] m_axi_foddr_V_BUSER;
input  [27:0] foddr_V_offset;
output  [9:0] ibuf0_V_address0;
output   ibuf0_V_ce0;
input  [127:0] ibuf0_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_foddr_V_AWVALID;
reg m_axi_foddr_V_WVALID;
reg m_axi_foddr_V_BREADY;
reg ibuf0_V_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    foddr_V_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    foddr_V_blk_n_W;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_214;
reg   [0:0] exitcond_reg_214_pp0_iter3_reg;
reg    foddr_V_blk_n_B;
wire    ap_CS_fsm_state12;
reg  signed [31:0] i_op_assign_1_reg_122;
wire  signed [31:0] lineWidthDiv16_cast_fu_133_p1;
reg  signed [31:0] lineWidthDiv16_cast_reg_197;
wire   [40:0] sum_fu_158_p2;
reg   [40:0] sum_reg_203;
reg    ap_sig_ioackin_m_axi_foddr_V_AWREADY;
wire   [0:0] exitcond_fu_174_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_sig_ioackin_m_axi_foddr_V_WREADY;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_214_pp0_iter1_reg;
reg   [0:0] exitcond_reg_214_pp0_iter2_reg;
wire   [31:0] i_fu_179_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [127:0] ibuf0_V_load_reg_228;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire  signed [63:0] tmp_4_fu_185_p1;
wire   [63:0] sum_cast_fu_164_p1;
reg    ap_reg_ioackin_m_axi_foddr_V_AWREADY;
reg    ap_reg_ioackin_m_axi_foddr_V_WREADY;
wire    ap_block_pp0_stage0_01001;
wire  signed [31:0] i_op_assign_fu_190_p2;
wire   [39:0] tmp_s_fu_141_p1;
wire   [39:0] dramAddr_V_fu_144_p2;
wire   [40:0] tmp_6_cast_fu_150_p1;
wire   [40:0] sext_cast_fu_154_p1;
wire   [14:0] i_op_assign_fu_190_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] i_op_assign_fu_190_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_reg_ioackin_m_axi_foddr_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_foddr_V_WREADY = 1'b0;
end

cnna_mul_mul_26s_15ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
cnna_mul_mul_26s_15ns_32_1_1_U17(
    .din0(lineWidthDiv16),
    .din1(i_op_assign_fu_190_p1),
    .dout(i_op_assign_fu_190_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_foddr_V_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_foddr_V_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_foddr_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_m_axi_foddr_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_foddr_V_AWREADY <= 1'b0;
            end else if ((m_axi_foddr_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_foddr_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_foddr_V_WREADY <= 1'b0;
    end else begin
        if (((exitcond_reg_214_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_foddr_V_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_foddr_V_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_foddr_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_174_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_op_assign_1_reg_122 <= i_fu_179_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_foddr_V_AWREADY == 1'b1))) begin
        i_op_assign_1_reg_122 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_214 <= exitcond_fu_174_p2;
        exitcond_reg_214_pp0_iter1_reg <= exitcond_reg_214;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_reg_214_pp0_iter2_reg <= exitcond_reg_214_pp0_iter1_reg;
        exitcond_reg_214_pp0_iter3_reg <= exitcond_reg_214_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_214_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ibuf0_V_load_reg_228 <= ibuf0_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        lineWidthDiv16_cast_reg_197 <= lineWidthDiv16_cast_fu_133_p1;
        sum_reg_203 <= sum_fu_158_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_174_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((m_axi_foddr_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_foddr_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_foddr_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_foddr_V_AWREADY = m_axi_foddr_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_foddr_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_foddr_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_foddr_V_WREADY = m_axi_foddr_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_foddr_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        foddr_V_blk_n_AW = m_axi_foddr_V_AWREADY;
    end else begin
        foddr_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        foddr_V_blk_n_B = m_axi_foddr_V_BVALID;
    end else begin
        foddr_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_214_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        foddr_V_blk_n_W = m_axi_foddr_V_WREADY;
    end else begin
        foddr_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ibuf0_V_ce0 = 1'b1;
    end else begin
        ibuf0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_foddr_V_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_foddr_V_AWVALID = 1'b1;
    end else begin
        m_axi_foddr_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_foddr_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_foddr_V_BREADY = 1'b1;
    end else begin
        m_axi_foddr_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_214_pp0_iter3_reg == 1'd0) & (ap_reg_ioackin_m_axi_foddr_V_WREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        m_axi_foddr_V_WVALID = 1'b1;
    end else begin
        m_axi_foddr_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_foddr_V_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_174_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_174_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((m_axi_foddr_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state7_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state7_io));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((exitcond_reg_214_pp0_iter3_reg == 1'd0) & (ap_sig_ioackin_m_axi_foddr_V_WREADY == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dramAddr_V_fu_144_p2 = (cnn_oPara_memAddrImgOut_V_read + tmp_s_fu_141_p1);

assign exitcond_fu_174_p2 = ((i_op_assign_1_reg_122 == lineWidthDiv16_cast_reg_197) ? 1'b1 : 1'b0);

assign i_fu_179_p2 = ($signed(i_op_assign_1_reg_122) + $signed(32'd1));

assign i_op_assign_fu_190_p1 = i_op_assign_fu_190_p10;

assign i_op_assign_fu_190_p10 = hIndex;

assign ibuf0_V_address0 = tmp_4_fu_185_p1;

assign lineWidthDiv16_cast_fu_133_p1 = $signed(lineWidthDiv16);

assign m_axi_foddr_V_ARADDR = 32'd0;

assign m_axi_foddr_V_ARBURST = 2'd0;

assign m_axi_foddr_V_ARCACHE = 4'd0;

assign m_axi_foddr_V_ARID = 1'd0;

assign m_axi_foddr_V_ARLEN = 32'd0;

assign m_axi_foddr_V_ARLOCK = 2'd0;

assign m_axi_foddr_V_ARPROT = 3'd0;

assign m_axi_foddr_V_ARQOS = 4'd0;

assign m_axi_foddr_V_ARREGION = 4'd0;

assign m_axi_foddr_V_ARSIZE = 3'd0;

assign m_axi_foddr_V_ARUSER = 1'd0;

assign m_axi_foddr_V_ARVALID = 1'b0;

assign m_axi_foddr_V_AWADDR = sum_cast_fu_164_p1;

assign m_axi_foddr_V_AWBURST = 2'd0;

assign m_axi_foddr_V_AWCACHE = 4'd0;

assign m_axi_foddr_V_AWID = 1'd0;

assign m_axi_foddr_V_AWLEN = lineWidthDiv16_cast_reg_197;

assign m_axi_foddr_V_AWLOCK = 2'd0;

assign m_axi_foddr_V_AWPROT = 3'd0;

assign m_axi_foddr_V_AWQOS = 4'd0;

assign m_axi_foddr_V_AWREGION = 4'd0;

assign m_axi_foddr_V_AWSIZE = 3'd0;

assign m_axi_foddr_V_AWUSER = 1'd0;

assign m_axi_foddr_V_RREADY = 1'b0;

assign m_axi_foddr_V_WDATA = ibuf0_V_load_reg_228;

assign m_axi_foddr_V_WID = 1'd0;

assign m_axi_foddr_V_WLAST = 1'b0;

assign m_axi_foddr_V_WSTRB = 16'd65535;

assign m_axi_foddr_V_WUSER = 1'd0;

assign sext_cast_fu_154_p1 = foddr_V_offset;

assign sum_cast_fu_164_p1 = sum_reg_203;

assign sum_fu_158_p2 = (tmp_6_cast_fu_150_p1 + sext_cast_fu_154_p1);

assign tmp_4_fu_185_p1 = i_op_assign_1_reg_122;

assign tmp_6_cast_fu_150_p1 = dramAddr_V_fu_144_p2;

assign tmp_s_fu_141_p1 = $unsigned(i_op_assign_fu_190_p2);

endmodule //testUnLoadImage
